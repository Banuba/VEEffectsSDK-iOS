// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios17.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name VEEffectsSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import BanubaLicenseServicingSDK
import BanubaSDKServicing
import BanubaUtilities
import CoreMedia
import Foundation
import MetalKit
import QuartzCore
import Swift
import UIKit
@_exported import VEEffectsSDK
import VideoEditor
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import simd
@_hasMissingDesignatedInitializers public class BlurShapeDrawer : VideoEditor.CompositionRenderering {
  public var blurFrame: CoreFoundation.CGRect
  public var blurShape: BanubaUtilities.DrawableFigure
  public var videoSize: CoreFoundation.CGSize?
  required public init()
  public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source allSources: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, effect: any VideoEditor.EditorCompositionEffectProtocol, additionalParameters: [Swift.String : Any]?)
  @objc deinit
}
@_inheritsConvenienceInitializers public class BanubaMaskDrawer : VEEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
public class VideoEditorEffectDrawer : VideoEditor.CompositionRenderering {
  public var renderer: (any VEEffectsSDK.EffectRenderer)? {
    get
  }
  required public init()
  public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, effect: any VideoEditor.EditorCompositionEffectProtocol, additionalParameters: [Swift.String : Any]?)
  public func cleanUpResources()
  @objc deinit
}
public protocol EffectsApplicatorServicing : AnyObject {
  init(editor: any VideoEditor.VideoEditorServicing, effectConfigHolder: any VEEffectsSDK.EffectsHolderServicing)
  func applyVisualEffectApplicatorType(_ type: VEEffectsSDK.VisualEffectApplicatorType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
  func applySpeedEffectType(_ type: VEEffectsSDK.SpeedEffectType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
  func applyOverlayEffectType(_ type: VEEffectsSDK.OverlayEffectApplicatorType, effectInfo: VEEffectsSDK.VideoEditorEffectInfo)
  func addTransformEffect(atStartTime start: CoreMedia.CMTime, end: CoreMedia.CMTime, rotation: VideoEditor.AssetRotation, isVideoFitsAspect: Swift.Bool)
  func addCropEffect(atStartTime start: CoreMedia.CMTime, end: CoreMedia.CMTime, cropFrame: CoreFoundation.CGRect, videoSize: CoreFoundation.CGSize)
  func applyTransitionEffect(type: BanubaUtilities.TransitionType, effectInfo: VEEffectsSDK.TransitionEffectInfo)
}
public class EffectApplicator : VEEffectsSDK.EffectsApplicatorServicing {
  required public init(editor: any VideoEditor.VideoEditorServicing, effectConfigHolder: any VEEffectsSDK.EffectsHolderServicing)
  @objc deinit
}
extension VEEffectsSDK.EffectApplicator {
  public func applyVisualEffectApplicatorType(_ type: VEEffectsSDK.VisualEffectApplicatorType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
}
extension VEEffectsSDK.EffectApplicator {
  public func applySpeedEffectType(_ type: VEEffectsSDK.SpeedEffectType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
}
extension VEEffectsSDK.EffectApplicator {
  public func applyOverlayEffectType(_ type: VEEffectsSDK.OverlayEffectApplicatorType, effectInfo: VEEffectsSDK.VideoEditorEffectInfo)
}
extension VEEffectsSDK.EffectApplicator {
  public func applyColorEffect(name: Swift.String, lutUrl: Foundation.URL, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
}
extension VEEffectsSDK.EffectApplicator {
  public func addTransformEffect(atStartTime start: CoreMedia.CMTime, end: CoreMedia.CMTime, rotation: VideoEditor.AssetRotation, isVideoFitsAspect: Swift.Bool)
}
extension VEEffectsSDK.EffectApplicator {
  public func addCropEffect(atStartTime start: CoreMedia.CMTime, end: CoreMedia.CMTime, cropFrame: CoreFoundation.CGRect, videoSize: CoreFoundation.CGSize)
}
extension VEEffectsSDK.EffectApplicator {
  public func applyTransitionEffect(type: BanubaUtilities.TransitionType, effectInfo: VEEffectsSDK.TransitionEffectInfo)
}
@_inheritsConvenienceInitializers public class ColorEffectDrawer : VEEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
public class WatermarkApplicator : VideoEditor.WatermarkApplicatorServicing {
  public init()
  public func adjustWatermarkEffect(configuration: VideoEditor.WatermarkConfiguration, videoSize: CoreFoundation.CGSize) -> VideoEditor.VideoEditorFilterModel
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BanubaMaskRenderer : VEEffectsSDK.EffectRenderer {
  public static var postprocessServicing: (any BanubaSDKServicing.SDKMaskPostprocessServicing)?
  public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String, additionalParameters: [Swift.String : Any]?)
  @objc deinit
  public static func destroy()
  public static func loadEffectPath(_ path: Swift.String)
}
public class EffectMetalRenderer : VEEffectsSDK.EffectRenderer {
  required public init()
  public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String, additionalParameters: [Swift.String : Any]?)
  @objc deinit
}
public class EditorEffectModelBuilder {
  public init()
  public func gifModel(id: Swift.UInt, rendererInstance: (any VideoEditor.CompositionRenderering)?) -> VideoEditor.VideoEditorFilterModel
  public func textModel(id: Swift.UInt, rendererInstance: (any VideoEditor.CompositionRenderering)?) -> VideoEditor.VideoEditorFilterModel
  public func blurModel(id: Swift.UInt, rendererInstance: any VideoEditor.CompositionRenderering, blurFrame: CoreFoundation.CGRect, blurShape: BanubaUtilities.DrawableFigure, videoSize: CoreFoundation.CGSize) -> VideoEditor.VideoEditorFilterModel
  public func makeModels(configs: [[VEEffectsSDK.EditorEffectKey : Any]], startId: Swift.UInt) -> [VideoEditor.VideoEditorFilterModel]
  public func makeModel(config: [VEEffectsSDK.EditorEffectKey : Any], id: Swift.UInt) -> VideoEditor.VideoEditorFilterModel
  public func makeModel(visualEffect: VEEffectsSDK.VisualEffectApplicatorType, id: Swift.UInt) -> VideoEditor.VideoEditorFilterModel
  @objc deinit
}
@_inheritsConvenienceInitializers public class PixelationStaticEffectRenderer : VEEffectsSDK.EffectMetalRenderer {
  override public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String, additionalParameters: [Swift.String : Any]?)
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class RotateEffectDrawer : VEEffectsSDK.VideoEditorEffectDrawer {
  required public init(rotation: VideoEditor.AssetRotation, isVideoFitsAspect: Swift.Bool)
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class CropEffectDrawer : VEEffectsSDK.VideoEditorEffectDrawer {
  required public init(cropFrame: CoreFoundation.CGRect, videoSize: CoreFoundation.CGSize)
  required public init()
  @objc deinit
}
public protocol ImagesSequence {
  var relativeScreenPoints: VEEffectsSDK.ImagePoints { get }
  func getImage(at time: Foundation.TimeInterval) -> CoreGraphics.CGImage
}
public protocol EffectsHolderServicing : AnyObject {
  init(license: BanubaLicenseServicingSDK.License)
  var transitionEffectsConfig: [BanubaUtilities.TransitionType] { get }
  var speedEffectsConfig: [[VEEffectsSDK.EditorEffectKey : Any]] { get }
  var visualEffectsConfig: [VEEffectsSDK.VisualEffectApplicatorType] { get }
}
@objc final public class EditorEffectsConfigHolder : ObjectiveC.NSObject, VEEffectsSDK.EffectsHolderServicing {
  public init(license: BanubaLicenseServicingSDK.License)
  public init(token: Swift.String)
  final public var transitionEffectsConfig: [BanubaUtilities.TransitionType] {
    get
  }
  final public var speedEffectsConfig: [[VEEffectsSDK.EditorEffectKey : Any]] {
    get
  }
  final public var visualEffectsConfig: [VEEffectsSDK.VisualEffectApplicatorType] {
    get
  }
  @objc deinit
}
public struct TransitionEffectInfo {
  public var type: BanubaUtilities.TransitionType {
    get
  }
  public var start: CoreMedia.CMTime {
    get
  }
  public var end: CoreMedia.CMTime {
    get
  }
  public init(type: BanubaUtilities.TransitionType, start: CoreMedia.CMTime, end: CoreMedia.CMTime)
}
public protocol TransformEffectsSDKServicing {
  var effectsApplicator: any VEEffectsSDK.EffectsApplicatorServicing { get }
}
public protocol EffectsSDKServicing : VEEffectsSDK.TransformEffectsSDKServicing {
  var watermarkApplicator: any VideoEditor.WatermarkApplicatorServicing { get }
  var effectsConfigHolder: any VEEffectsSDK.EffectsHolderServicing { get }
}
public struct ImagePoints {
  public init(leftTop: CoreFoundation.CGPoint, rightTop: CoreFoundation.CGPoint, leftBottom: CoreFoundation.CGPoint, rightBottom: CoreFoundation.CGPoint)
  public static var zero: VEEffectsSDK.ImagePoints {
    get
  }
  public var leftTop: CoreFoundation.CGPoint
  public var rightTop: CoreFoundation.CGPoint
  public var leftBottom: CoreFoundation.CGPoint
  public var rightBottom: CoreFoundation.CGPoint
  public func applying(_ t: CoreFoundation.CGAffineTransform) -> VEEffectsSDK.ImagePoints
}
public class ImageEffectInfo {
  public enum ImageSource {
    case `static`(_: CoreGraphics.CGImage)
    case dynamic(_: any VEEffectsSDK.VideoEditorEffectImageProvider)
  }
  final public let imageSource: VEEffectsSDK.ImageEffectInfo.ImageSource
  final public let imagePoints: VEEffectsSDK.ImagePoints
  public init(imageSource: VEEffectsSDK.ImageEffectInfo.ImageSource, imagePoints: VEEffectsSDK.ImagePoints)
  @objc deinit
}
public struct EffectIDs {
  public static let colorEffectStartId: Swift.UInt
  public static let maskEffectStartId: Swift.UInt
  public static let speedEffectStartId: Swift.UInt
  public static let visualEffectStartId: Swift.UInt
  public static let transformEffectId: Swift.UInt
  public static let blurEffectId: Swift.UInt
  public static let cropEffectId: Swift.UInt
}
public protocol EffectRenderer {
  func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String, additionalParameters: [Swift.String : Any]?)
}
@objc public class CameraLutStage : ObjectiveC.NSObject {
  @objc public var name: Swift.String
  @objc public var isActive: Swift.Bool
  public init(file url: Foundation.URL)
  @objc deinit
}
extension VEEffectsSDK.CameraLutStage : BanubaSDKServicing.RenderEffect {
  @objc dynamic public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc dynamic public func load()
  @objc dynamic public func unload()
  @objc dynamic public func apply(pixelBuffer: CoreVideo.CVPixelBuffer)
}
public protocol VideoEditorEffectImageProvider {
  func provideImage(for textureSize: CoreFoundation.CGSize) -> UIKit.UIImage
}
public struct VideoEditorEffectInfo {
  public let uuid: Swift.String
  public let image: UIKit.UIImage?
  public let imageProvider: (any VEEffectsSDK.VideoEditorEffectImageProvider)?
  public let relativeScreenPoints: VEEffectsSDK.ImagePoints?
  public let start: CoreMedia.CMTime
  public let end: CoreMedia.CMTime
  public init(uuid: Swift.String, image: UIKit.UIImage? = nil, imageProvider: (any VEEffectsSDK.VideoEditorEffectImageProvider)? = nil, relativeScreenPoints: VEEffectsSDK.ImagePoints? = nil, start: CoreMedia.CMTime, end: CoreMedia.CMTime)
}
public enum EditorEffectKey : Swift.String {
  case name
  case type
  case warpType
  case speed
  case renderer
  case path
  case id
  case effectType
  case additionalParameters
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OverlayEffectApplicatorType {
  case gif
  case text
  case blur(drawableFigure: BanubaUtilities.DrawableFigure, coordinates: BanubaUtilities.BlurCoordinateParams)
}
public enum VisualEffectApplicatorType : Swift.CaseIterable {
  case acid
  case cathode
  case dvCam
  case flash
  case glitch
  case glitchEffect2
  case heatmap
  case lumeire
  case kaleidoscope
  case dslrKaleidoscope
  case pixelationDynamic
  case pixelationStatic
  case polaroid
  case rave
  case soul
  case stars
  case tvFoam
  case transition1
  case transition4
  case twitch
  case vhs
  case vhs2
  case zoom
  case zoom2
  case transitionDiagonal
  case transitionDefocus
  case transitionTunnelVision
  case transitionTunnelMirrored
  case electricalDiagram
  case frames2
  case frames3
  case frames4
  case frames6
  case frames9
  case threeFrameWB
  case threeLayerMirror
  case pendulum
  case revers2
  case coloring
  case randomMonochrome
  case fireflies
  case fromDark4
  case greySpin4
  case blackWhiteFlash
  case mirror
  case film
  case glitch3
  public var tokenId: Swift.Int {
    get
  }
  public var globalId: Swift.UInt {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public var rendererClass: any VideoEditor.CompositionRenderering.Type {
    get
  }
  public static func == (a: VEEffectsSDK.VisualEffectApplicatorType, b: VEEffectsSDK.VisualEffectApplicatorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [VEEffectsSDK.VisualEffectApplicatorType]
  nonisolated public static var allCases: [VEEffectsSDK.VisualEffectApplicatorType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum SpeedEffectType : Swift.String, Swift.CaseIterable {
  case slowmo
  case rapid
  public init?(rawValue: Swift.String)
  public typealias AllCases = [VEEffectsSDK.SpeedEffectType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [VEEffectsSDK.SpeedEffectType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension BanubaUtilities.TransitionType {
  public var rendererClass: (any VideoEditor.CompositionRenderering.Type)? {
    get
  }
}
extension VEEffectsSDK.EditorEffectKey : Swift.Equatable {}
extension VEEffectsSDK.EditorEffectKey : Swift.Hashable {}
extension VEEffectsSDK.EditorEffectKey : Swift.RawRepresentable {}
extension VEEffectsSDK.VisualEffectApplicatorType : Swift.Equatable {}
extension VEEffectsSDK.VisualEffectApplicatorType : Swift.Hashable {}
extension VEEffectsSDK.SpeedEffectType : Swift.Equatable {}
extension VEEffectsSDK.SpeedEffectType : Swift.Hashable {}
extension VEEffectsSDK.SpeedEffectType : Swift.RawRepresentable {}
